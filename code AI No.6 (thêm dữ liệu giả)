# M√¥ ph·ªèng AI d·ª± ƒëo√°n nƒÉng su·∫•t c√¢y tr√™n 1 ch·∫≠u r·ªông 1m¬≤
# Theo l∆∞·ª£ng ph√¢n h·ªØu c∆° b√≥n (kg/ch·∫≠u) v√† th·ªùi gian th·ª≠ nghi·ªám (gi·ªù)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from mpl_toolkits.mplot3d import Axes3D

# H√†m ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ ng∆∞·ªùi d√πng
def get_user_data():
    phan_huu_co_str = input("Nh·∫≠p l∆∞·ª£ng ph√¢n h·ªØu c∆° (v√≠ d·ª•: 0, 4, 12, 22, 34, 39, 45), c√°ch nhau b·∫±ng d·∫•u ph·∫©y: ")
    thoi_gian_str = input("Nh·∫≠p th·ªùi gian th·ª≠ nghi·ªám (v√≠ d·ª•: 30, 60, 90, 120, 150, 180, 210), c√°ch nhau b·∫±ng d·∫•u ph·∫©y: ")
    nang_suat_str = input("Nh·∫≠p nƒÉng su·∫•t c√¢y t∆∞∆°ng ·ª©ng (v√≠ d·ª•: 0.5, 3.2, 5.0, 11.8, 22.5, 28.8, 34.0), c√°ch nhau b·∫±ng d·∫•u ph·∫©y: ")

    try:
        phan_huu_co = np.array([float(x.strip()) for x in phan_huu_co_str.split(',')])
        thoi_gian = np.array([float(x.strip()) for x in thoi_gian_str.split(',')])
        nang_suat = np.array([float(x.strip()) for x in nang_suat_str.split(',')])
        if not (len(phan_huu_co) == len(thoi_gian) == len(nang_suat)):
            print("L·ªói: S·ªë l∆∞·ª£ng gi√° tr·ªã ph√¢n, th·ªùi gian v√† nƒÉng su·∫•t kh√¥ng kh·ªõp.")
            return None, None, None
        # K·∫øt h·ª£p ph√¢n b√≥n v√† th·ªùi gian th√†nh m·ªôt m·∫£ng 2D cho m√¥ h√¨nh h·ªìi quy ƒëa bi·∫øn
        features = np.column_stack((phan_huu_co, thoi_gian))
        return features, nang_suat, thoi_gian
    except ValueError:
        print("L·ªói: ƒê·ªãnh d·∫°ng nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p c√°c s·ªë c√°ch nhau b·∫±ng d·∫•u ph·∫©y.")
        return None, None, None

# ---- Ch·ªçn ch·∫ø ƒë·ªô d·ªØ li·ªáu ----
use_fake = input("B·∫°n c√≥ mu·ªën d√πng d·ªØ li·ªáu gi·∫£ (c√≥/kh√¥ng)? ").strip().lower()

if use_fake == "c√≥":
    # D·ªØ li·ªáu gi·∫£ ƒë·ªãnh (c√≥ th·ªÉ thay ƒë·ªïi cho ƒë·∫πp h∆°n)
    phan = np.array([0, 4, 12, 22, 34, 39, 45])
    thoi_gian = np.array([30, 60, 90, 120, 150, 180, 210])
    nang_suat = np.array([0.5, 3.2, 5.0, 11.8, 22.5, 28.8, 34.0])
    features = np.column_stack((phan, thoi_gian))
else:
    features, nang_suat, thoi_gian = get_user_data()

# ---- Ch·∫°y m√¥ h√¨nh h·ªìi quy ----
if features is not None and nang_suat is not None and thoi_gian is not None:
    model = LinearRegression()
    model.fit(features, nang_suat)

    # In ra ph∆∞∆°ng tr√¨nh h·ªìi quy
    print("\nK·∫øt qu·∫£ m√¥ h√¨nh:")
    print("H·ªá s·ªë g√≥c (a1 cho ph√¢n h·ªØu c∆°):", model.coef_[0])
    print("H·ªá s·ªë g√≥c (a2 cho th·ªùi gian th·ª≠ nghi·ªám):", model.coef_[1])
    print("H·ªá s·ªë ch·∫∑n (b):", model.intercept_)
    print(f"Ph∆∞∆°ng tr√¨nh d·ª± ƒëo√°n: NƒÉng su·∫•t ‚âà {model.coef_[0]:.2f} * Ph√¢n + {model.coef_[1]:.2f} * Th·ªùi gian + {model.intercept_:.2f}")

    # Th·ª≠ d·ª± ƒëo√°n m·∫´u
    phan_test = 25
    time_test = 120
    nang_suat_du_doan = model.predict([[phan_test, time_test]])
    print(f"\nüëâ D·ª± ƒëo√°n nƒÉng su·∫•t cho {phan_test}kg ph√¢n v√† {time_test} gi·ªù = {nang_suat_du_doan[0]:.2f} kg/ch·∫≠u")

    # V·∫Ω bi·ªÉu ƒë·ªì 3D
    fig = plt.figure(figsize=(10, 7))
    ax = fig.add_subplot(111, projection='3d')

    ax.scatter(features[:, 0], features[:, 1], nang_suat, c='r', marker='o', label="D·ªØ li·ªáu th·ª±c t·∫ø")

    # T·∫°o l∆∞·ªõi ƒë·ªÉ v·∫Ω m·∫∑t ph·∫≥ng h·ªìi quy
    phan_range = np.linspace(min(features[:, 0]), max(features[:, 0]), 20)
    time_range = np.linspace(min(features[:, 1]), max(features[:, 1]), 20)
    phan_grid, time_grid = np.meshgrid(phan_range, time_range)
    X_pred = np.column_stack((phan_grid.ravel(), time_grid.ravel()))
    y_pred = model.predict(X_pred).reshape(phan_grid.shape)

    ax.plot_surface(phan_grid, time_grid, y_pred, alpha=0.5, cmap='viridis')

    ax.set_xlabel("Ph√¢n h·ªØu c∆° (kg/ch·∫≠u)")
    ax.set_ylabel("Th·ªùi gian (gi·ªù)")
    ax.set_zlabel("NƒÉng su·∫•t (kg/ch·∫≠u)")
    ax.set_title("H·ªìi quy tuy·∫øn t√≠nh ƒëa bi·∫øn: Ph√¢n & Th·ªùi gian ‚Üí NƒÉng su·∫•t")
    ax.legend()
    plt.show()
else:
    print("Kh√¥ng th·ªÉ ti·∫øn h√†nh m√¥ ph·ªèng do l·ªói nh·∫≠p d·ªØ li·ªáu.")
